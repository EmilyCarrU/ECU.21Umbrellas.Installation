//Alternates with an if/then statement between pin 4 and pin 5 through a variable
//Experimenting with variations of the .h library. i.e. setPin, etc.
#include <FastSPI_LED.h>

int trigger = 1;

#define NUM_LEDS 10

// Sometimes chipsets wire in a backwards sort of way
struct CRGB { 
  unsigned char b; 
  unsigned char r; 
  unsigned char g; 
};
//struct CRGB { unsigned char r; unsigned char g; unsigned char b; };
struct CRGB *leds;

//#define FOUR 4
//#define FIVE 5

int aPin = 4;

int interval = 0;

void setup()
{
  FastSPI_LED.setLeds(NUM_LEDS);
  //FastSPI_LED.setChipset(CFastSPI_LED::SPI_SM16716);
  FastSPI_LED.setChipset(CFastSPI_LED::SPI_TM1809);
  //FastSPI_LED.setChipset(CFastSPI_LED::SPI_LPD6803);
  //FastSPI_LED.setChipset(CFastSPI_LED::SPI_HL1606);
  //FastSPI_LED.setChipset(CFastSPI_LED::SPI_595);
  //FastSPI_LED.setChipset(CFastSPI_LED::SPI_WS2801);
  FastSPI_LED.setPinCount(8);
  FastSPI_LED.setPin(4,4,4);
  FastSPI_LED.setPin(5,5,4);



  FastSPI_LED.init();
  FastSPI_LED.start();
  leds = (struct CRGB*)FastSPI_LED.getRGBData(); 
  Serial.begin(9600);
  Serial.println("serial");
}

void loop() { 
  if(trigger == 1){

    interval = random(20,100);
    //  // one at a time
    for(int j = 0; j < 4; j++) { //controls the number of cases 
      for(int i = 0 ; i < NUM_LEDS; i++ ) { //controls the number of LEDs on a strand
        memset(leds, 0, NUM_LEDS * 3);//(LEDs array, constant brightness value, RGB components for NUM LEDs)
        switch(j) { 
        case 0: 
          leds[i].b = 255; 
          leds[i].g = 0; 
          leds[i].r = 0; 
          break;
        case 1: 
          leds[i].b = 0; 
          leds[i].g = 255; 
          leds[i].r = 0; 
          break;
        case 2: 
          leds[i].b = 255; 
          leds[i].g = 255; 
          leds[i].r = 255; 
          break;
          
         case 3: 
          leds[i].b = 0; 
          leds[i].g = 0; 
          leds[i].r = 255; 
          break;

        }
        FastSPI_LED.show();
        delay(interval);
      }
    }
    trigger = 1;
    Serial.print("t is: ");
   Serial.println( trigger, DEC);

  } 
  else {

    if(aPin == 4){
      aPin = 5;
    }else{
      aPin = 4;
    }
    




    FastSPI_LED.setPin(aPin);
    FastSPI_LED.init();
    FastSPI_LED.start();
    Serial.println("setLed");

    trigger = 1;

  }



  //// growing/receeding bars
  //  for(int j = 0; j < 3; j++) { 
  //    memset(leds, 0, NUM_LEDS * 3);
  //    for(int i = 0 ; i < NUM_LEDS; i++ ) {
  //      switch(j) { 
  //        case 0: leds[i].r = 255; break;
  //        case 1: leds[i].g = 255; break;
  //        case 2: leds[i].b = 255; break;
  //      }
  //      FastSPI_LED.show();
  //      delay(10);
  //    }
  //    for(int i = NUM_LEDS-1 ; i >= 0; i-- ) {
  //      switch(j) { 
  //        case 0: leds[i].r = 0; break;
  //        case 1: leds[i].g = 0; break;
  //        case 2: leds[i].b = 0; break;
  //      }
  //      FastSPI_LED.show();
  //      delay(1);
  //    }
  //  }
  //  
  //  // Fade in/fade out
  //  for(int j = 0; j < 3; j++ ) { 
  //    memset(leds, 0, NUM_LEDS * 3);
  //    for(int k = 0; k < 256; k++) { 
  //      for(int i = 0; i < NUM_LEDS; i++ ) {
  //        switch(j) { 
  //          case 0: leds[i].r = k; break;
  //          case 1: leds[i].g = k; break;
  //          case 2: leds[i].b = k; break;
  //        }
  //      }
  //      FastSPI_LED.show();
  //      delay(3);
  //    }
  //    for(int k = 255; k >= 0; k--) { 
  //      for(int i = 0; i < NUM_LEDS; i++ ) {
  //        switch(j) { 
  //          case 0: leds[i].r = k; break;
  //          case 1: leds[i].g = k; break;
  //          case 2: leds[i].b = k; break;
  //        }
  //      }
  //      FastSPI_LED.show();
  //      delay(3);
  //    }
  //  }
}





