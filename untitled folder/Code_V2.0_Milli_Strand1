//Alternates with an if/then statement between pin 4 and pin 5 through a variable
//Attempt at including Millis as a clock

#include <FastSPI_LED.h>

int trigger = 1;
#define NUM_LEDS 10
// Sometimes chipsets wire in a backwards sort of way
struct CRGB { 
  unsigned char b; 
  unsigned char r; 
  unsigned char g; 
};
//struct CRGB { unsigned char r; unsigned char g; unsigned char b; };
struct CRGB *leds;

//#define FOUR 4
//#define FIVE 5
int aPin = 4;
int interval = 0;
//----Millis Clock variables------------------------------//
unsigned long currentMillis = 0;
unsigned long stepTime1 = 0; // last time the light stepped
unsigned long delay1 = 150; // delay between advancement to next LED  
int str1LED = 0; //one rib of umbrella

void setup()
{
  FastSPI_LED.setLeds(NUM_LEDS);
  //FastSPI_LED.setChipset(CFastSPI_LED::SPI_SM16716);
  FastSPI_LED.setChipset(CFastSPI_LED::SPI_TM1809);
  //FastSPI_LED.setChipset(CFastSPI_LED::SPI_LPD6803);
  //FastSPI_LED.setChipset(CFastSPI_LED::SPI_HL1606);
  //FastSPI_LED.setChipset(CFastSPI_LED::SPI_595);
  //FastSPI_LED.setChipset(CFastSPI_LED::SPI_WS2801);
  //-------------------------
  FastSPI_LED.setPin(4); //set pin to drive LEDs
  FastSPI_LED.init();
  FastSPI_LED.start();
  leds = (struct CRGB*)FastSPI_LED.getRGBData(); 
  Serial.begin(9600);
  Serial.println("serial");
  memset(leds, 0, NUM_LEDS * 3);//(LEDs array, constant brightness value, RGB components for NUM LEDs)
  leds[0].b = 255; 
  leds[0].g = 255; 
  leds[0].r = 255;

}

void loop (){
  currentMillis = millis ();

  if(currentMillis - stepTime1 >= delay1) {
    leds[str1LED].b = 0; 
    leds[str1LED].g = 0; 
    leds[str1LED].r = 0;

    str1LED++;
    if(str1LED == NUM_LEDS){
      str1LED = 0;
    }
    leds[str1LED].b = 255; 
    leds[str1LED].g = 255; 
    leds[str1LED].r = 255;
    
    stepTime1 = currentMillis;
    
  }
  
    FastSPI_LED.show();
    delay(4);

}

